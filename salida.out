Grammar:

Rule 0     S' -> Programa
Rule 1     Programa -> clases
Rule 2     clases -> clases clase
Rule 3     clases -> clase
Rule 4     clase -> CLASS TYPEID { atributos } ;
Rule 5     atributos -> <empty>
Rule 6     atributos -> atributos atributo
Rule 7     atributo -> OBJECTID : TYPEID ;

Unused terminals:

    STR_CONST
    LET
    NEW
    LOOP
    ELSE
    CASE
    FI
    THEN
    POOL
    BOOL_CONST
    INHERITS
    DARROW
    NOT
    OF
    LE
    NUMBER
    ISVOID
    INT_CONST
    ESAC
    ASSIGN
    IN
    IF
    WHILE

Terminals, with rules where they appear:

:                    : 7
;                    : 4 7
ASSIGN               : 
BOOL_CONST           : 
CASE                 : 
CLASS                : 4
DARROW               : 
ELSE                 : 
ESAC                 : 
FI                   : 
IF                   : 
IN                   : 
INHERITS             : 
INT_CONST            : 
ISVOID               : 
LE                   : 
LET                  : 
LOOP                 : 
NEW                  : 
NOT                  : 
NUMBER               : 
OBJECTID             : 7
OF                   : 
POOL                 : 
STR_CONST            : 
THEN                 : 
TYPEID               : 4 7
WHILE                : 
error                : 
{                    : 4
}                    : 4

Nonterminals, with rules where they appear:

Programa             : 0
atributo             : 6
atributos            : 4 6
clase                : 2 3
clases               : 1 2


state 0

    (0) S' -> . Programa
    (1) Programa -> . clases
    (2) clases -> . clases clase
    (3) clases -> . clase
    (4) clase -> . CLASS TYPEID { atributos } ;
    CLASS           shift and go to state 4

    Programa                       shift and go to state 1
    clases                         shift and go to state 2
    clase                          shift and go to state 3

state 1

    (0) S' -> Programa .


state 2

    (1) Programa -> clases .
    (2) clases -> clases . clase
    (4) clase -> . CLASS TYPEID { atributos } ;
    $end            reduce using rule 1 (Programa -> clases .)
    CLASS           shift and go to state 4

    clase                          shift and go to state 5

state 3

    (3) clases -> clase .
    CLASS           reduce using rule 3 (clases -> clase .)
    $end            reduce using rule 3 (clases -> clase .)


state 4

    (4) clase -> CLASS . TYPEID { atributos } ;
    TYPEID          shift and go to state 6


state 5

    (2) clases -> clases clase .
    CLASS           reduce using rule 2 (clases -> clases clase .)
    $end            reduce using rule 2 (clases -> clases clase .)


state 6

    (4) clase -> CLASS TYPEID . { atributos } ;
    {               shift and go to state 7


state 7

    (4) clase -> CLASS TYPEID { . atributos } ;
    (5) atributos -> .
    (6) atributos -> . atributos atributo
    }               reduce using rule 5 (atributos -> .)
    OBJECTID        reduce using rule 5 (atributos -> .)

    atributos                      shift and go to state 8

state 8

    (4) clase -> CLASS TYPEID { atributos . } ;
    (6) atributos -> atributos . atributo
    (7) atributo -> . OBJECTID : TYPEID ;
    }               shift and go to state 9
    OBJECTID        shift and go to state 11

    atributo                       shift and go to state 10

state 9

    (4) clase -> CLASS TYPEID { atributos } . ;
    ;               shift and go to state 12


state 10

    (6) atributos -> atributos atributo .
    }               reduce using rule 6 (atributos -> atributos atributo .)
    OBJECTID        reduce using rule 6 (atributos -> atributos atributo .)


state 11

    (7) atributo -> OBJECTID . : TYPEID ;
    :               shift and go to state 13


state 12

    (4) clase -> CLASS TYPEID { atributos } ; .
    CLASS           reduce using rule 4 (clase -> CLASS TYPEID { atributos } ; .)
    $end            reduce using rule 4 (clase -> CLASS TYPEID { atributos } ; .)


state 13

    (7) atributo -> OBJECTID : . TYPEID ;
    TYPEID          shift and go to state 14


state 14

    (7) atributo -> OBJECTID : TYPEID . ;
    ;               shift and go to state 15


state 15

    (7) atributo -> OBJECTID : TYPEID ; .
    }               reduce using rule 7 (atributo -> OBJECTID : TYPEID ; .)
    OBJECTID        reduce using rule 7 (atributo -> OBJECTID : TYPEID ; .)
